	.text
	.file	"benchmark.c"
	.globl	strlen_avx2                     # -- Begin function strlen_avx2
	.p2align	4, 0x90
	.type	strlen_avx2,@function
strlen_avx2:                            # @strlen_avx2
	.cfi_startproc
# %bb.0:
	testq	%rdi, %rdi
	je	.LBB0_1
# %bb.2:
	prefetchnta	(%rdi)
	prefetchnta	4096(%rdi)
	prefetchnta	8192(%rdi)
	prefetchnta	12288(%rdi)
	movq	%rdi, %rcx
	testb	$31, %dil
	je	.LBB0_9
# %bb.3:
	cmpb	$0, (%rdi)
	je	.LBB0_4
# %bb.7:
	leaq	1(%rdi), %rcx
	movq	%rdi, %rax
	.p2align	4, 0x90
.LBB0_8:                                # =>This Inner Loop Header: Depth=1
	leal	1(%rax), %edx
	testb	$31, %dl
	je	.LBB0_9
# %bb.5:                                #   in Loop: Header=BB0_8 Depth=1
	incq	%rax
	cmpb	$0, (%rcx)
	leaq	1(%rcx), %rcx
	jne	.LBB0_8
# %bb.6:
	subq	%rdi, %rax
	retq
.LBB0_9:
	prefetchnta	(%rcx)
	prefetchnta	4096(%rcx)
	prefetchnta	8192(%rcx)
	prefetchnta	12288(%rcx)
	vpxor	%xmm0, %xmm0, %xmm0
	vpcmpeqb	(%rcx), %ymm0, %ymm1
	vpmovmskb	%ymm1, %eax
	testl	%eax, %eax
	je	.LBB0_10
# %bb.18:
	subq	%rdi, %rcx
	tzcntl	%eax, %eax
	addq	%rcx, %rax
.LBB0_19:
	vzeroupper
	retq
.LBB0_4:
	movq	%rdi, %rax
	subq	%rdi, %rax
	retq
.LBB0_10:
	vpcmpeqb	32(%rcx), %ymm0, %ymm0
	vpmovmskb	%ymm0, %eax
	testl	%eax, %eax
	je	.LBB0_13
# %bb.11:
	movq	%rcx, %rdx
.LBB0_12:
	subq	%rdi, %rdx
	addq	$32, %rdx
	movq	%rdx, %rax
	vzeroupper
	retq
.LBB0_13:
	movq	%rcx, %rax
	subq	%rdi, %rax
	addq	$96, %rax
	vpxor	%xmm0, %xmm0, %xmm0
	.p2align	4, 0x90
.LBB0_14:                               # =>This Inner Loop Header: Depth=1
	vpcmpeqb	64(%rcx), %ymm0, %ymm1
	vpmovmskb	%ymm1, %edx
	testl	%edx, %edx
	jne	.LBB0_15
# %bb.16:                               #   in Loop: Header=BB0_14 Depth=1
	vpcmpeqb	96(%rcx), %ymm0, %ymm1
	vpmovmskb	%ymm1, %edx
	testl	%edx, %edx
	jne	.LBB0_19
# %bb.17:                               #   in Loop: Header=BB0_14 Depth=1
	leaq	32(%rcx), %rdx
	prefetchnta	(%rdx)
	prefetchnta	4128(%rcx)
	prefetchnta	8224(%rcx)
	prefetchnta	12320(%rcx)
	vpcmpeqb	64(%rcx), %ymm0, %ymm1
	vpmovmskb	%ymm1, %esi
	addq	$32, %rax
	movq	%rdx, %rcx
	testl	%esi, %esi
	je	.LBB0_14
	jmp	.LBB0_12
.LBB0_15:
	addq	$-32, %rax
	vzeroupper
	retq
.LBB0_1:
	xorl	%eax, %eax
	retq
.Lfunc_end0:
	.size	strlen_avx2, .Lfunc_end0-strlen_avx2
	.cfi_endproc
                                        # -- End function
	.ident	"Ubuntu clang version 12.0.1-19ubuntu3"
	.section	".note.GNU-stack","",@progbits
	.addrsig
